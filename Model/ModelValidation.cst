<%-- 
Name	: Provider.cst
Author	: XiongXueHao
Description: Datebase Provider
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate"  Debug="False" Description="Creates a simplistic entity object." %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Database" %>
<%@ Property Name="SaveFilePath" Type="System.String" Category="Context" Description="SaveFilePath" %>
<%@ Property Name="NameSpace" Type="System.String" Category="Context" Description="NameSpace" %>
<%@ Property Name="Entities" Type="System.String" Category="Context" Description="Entities" %>
<%@ Property Name="BaseDbName" Type="System.String" Category="Context" Description="BaseDbName" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<% this.OutputFile = SaveFilePath+"\\" + SourceTable.Name + "Validation.cs"; %>
<script runat="template">
public string LCase(string text)
{
    return text.Substring(0,1).ToLower() + text.Substring(1);
}
public string UCase(string text)
{
    return text.Substring(0,1).ToUpper() + text.Substring(1);
}
public string SText(string text)
{
    if(text.IndexOf("_")>0)
        return text;
    string reText=string.Empty;
    string lastChar=text.Substring(text.Length-1);
    if(lastChar=="s" || lastChar=="x" || lastChar=="o")
    {
        reText=text+"es";
    }
    else if(lastChar=="y")
    {
        reText=text.Remove(text.Length - 1,1)+"ies";
    }
    else
    {
        reText=text+"s";
    }
    return reText;
}
public string GetCSharpVariableType(ColumnSchema column)
        {
            switch(column.DataType)
            {
                case DbType.AnsiString: return "string";
                case DbType.AnsiStringFixedLength: return "string";
                case DbType.Binary: return "byte[]";
                case DbType.Boolean: return "bool";
                case DbType.Byte: return "int";
                case DbType.Currency: return "decimal";
                case DbType.Date: return "DataTime";
                case DbType.DateTime: return "DateTime";
                case DbType.Decimal: return "decimal";
                case DbType.Double: return "double";
                case DbType.Guid: return "Guid";
                case DbType.Int16: return "short";
                case DbType.Int32: return "int";
                case DbType.Int64: return "long";
                case DbType.Object: return "object";
                case DbType.SByte: return "sbyte";
                case DbType.Single: return "float";
                case DbType.String: return "string";
                case DbType.StringFixedLength: return "string";
                case DbType.Time: return "TimeSpan";
                case DbType.UInt16: return "ushort";
                case DbType.UInt32: return "uint";
                case DbType.UInt64: return "ulong";
                case DbType.VarNumeric: return "decimal";
            }

            return "string";
        }
</script>
<%string nameSpace=NameSpace;%>
<%string className=SourceTable.Name+"Validation";%>
<%int idPrime=0;%>
<%string tableName=SourceTable.Name;%>
<%string tableNameUpper=UCase(SourceTable.Name);%>
<%string tableNames=SText(SourceTable.Name);%>
<%string tablePk=SourceTable.Columns[idPrime].Name;%>
<%string tablePkLower=LCase(SourceTable.Columns[idPrime].Name);%>
<%string tablePkUpper=UCase(SourceTable.Columns[idPrime].Name);%>
<%string tablePkType=GetCSharpVariableType(SourceTable.Columns[idPrime]);%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel;
using System.Web.Mvc;
using DataAnnotationsExtensions;

/*
Name : <%=tableNameUpper%> Validation
CreatAuthor : XiongXueHao
CreatTime : <%=DateTime.Now.ToString()%>
Description : just creat some base methods with codesmith, please add or edit your method.
*/
namespace <%=nameSpace%>.Model
{
    [MetadataType(typeof(<%=className%>))]
    public partial class <%=tableName%>
    {
        public class <%=className%>
        {
            /*
            <% for(int i=1;i<SourceTable.Columns.Count;i++)
            {
                string type=GetCSharpVariableType(SourceTable.Columns[i]);
                %>
                [Display(Name ="<%=SourceTable.Columns[i].Name%>")]
                <%
                if(!SourceTable.Columns[i].AllowDBNull)
                {%>
                    [Required(ErrorMessage = "{0}不能为空")]
                <%}
                switch(type)
                {
                    case "string":%>
                        [StringLength(<%=SourceTable.Columns[i].Size%>, ErrorMessage = "{0}不能超过{1}个字符")]
                        <%break;
                }
            %>
            public <%=type%> <%=SourceTable.Columns[i].Name%> { get; set; }
            <%}%>
            */
        }
    }
}

